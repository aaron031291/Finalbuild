"""
DigitalOcean Deployment Script for AI Orchestration System (Layer 3)
Includes: Auto-Discovery, Immutable Logging, AI Orchestration, and Compute Sharing
"""

import os
import time
import hmac
import hashlib
from digitalocean import Droplet, Manager, Spaces, Kubernetes, Project
from digitalocean import Database, Firewall, Tag
import boto3
from kubernetes import client, config

class DigitalOceanDeployer:
    def __init__(self):
        self.token = os.getenv('DO_API_TOKEN')
        self.manager = Manager(token=self.token)
        self.region = 'nyc3'
        self.project_name = 'AI-Orchestration-Layer3'
        self.tags = {
            'ai_orchestrator': Tag(name='ai-orchestrator'),
            'log_node': Tag(name='log-node'),
            'service_registry': Tag(name='service-registry')
        }
        
        # Configuration
        self.config = {
            'droplet_size': 's-4vcpu-8gb',
            'gpu_node_size': 'g-2vcpu-8gb',
            'k8s_version': '1.29.1-do.0',
            'space_name': 'ai-logs-nyc3',
            'db_name': 'persistent-memory-store',
            'ssh_keys': ['your_ssh_key_fingerprint']
        }

    def create_infrastructure(self):
        """Create core infrastructure components"""
        try:
            # Create Project
            project = Project(
                token=self.token,
                name=self.project_name,
                purpose='Web Application'
            )
            project.create()
            print(f"Created project: {self.project_name}")

            # Create Spaces for Immutable Logs
            spaces = Spaces(
                token=self.token,
                region=self.region,
                name=self.config['space_name']
            )
            spaces.create()
            self._configure_immutable_logging()
            print("Created Spaces bucket for logs")

            # Create Managed Database
            db = Database(
                token=self.token,
                name=self.config['db_name'],
                engine='pg',
                version='15',
                region=self.region,
                size='db-s-2vcpu-4gb',
                num_nodes=3
            )
            db.create()
            print("Created managed PostgreSQL database")

            # Create Firewall
            firewall = Firewall(
                token=self.token,
                name='ai-orchestration-fw',
                inbound_rules=[
                    {
                        'protocol': 'tcp',
                        'ports': '22',
                        'sources': {'addresses': ['0.0.0.0/0']}
                    },
                    {
                        'protocol': 'tcp',
                        'ports': '80',
                        'sources': {'tags': ['service-registry']}
                    }
                ],
                outbound_rules=[
                    {
                        'protocol': 'tcp',
                        'ports': '1-65535',
                        'destinations': {'tags': ['service-registry']}
                    }
                ]
            )
            firewall.create()
            print("Created firewall rules")

            return True
        except Exception as e:
            print(f"Infrastructure creation failed: {str(e)}")
            return False

    def deploy_kubernetes_cluster(self):
        """Deploy managed Kubernetes cluster"""
        try:
            k8s = Kubernetes(
                token=self.token,
                name='ai-orchestration-cluster',
                region=self.region,
                version=self.config['k8s_version'],
                node_pools=[
                    {
                        'size': self.config['droplet_size'],
                        'name': 'ai-nodes',
                        'count': 3
                    },
                    {
                        'size': self.config['gpu_node_size'],
                        'name': 'gpu-nodes',
                        'count': 2
                    }
                ]
            )
            k8s.create()
            print("Kubernetes cluster creating... (this may take several minutes)")
            time.sleep(600)  # Wait for cluster creation
            self._configure_k8s()
            return True
        except Exception as e:
            print(f"Kubernetes deployment failed: {str(e)}")
            return False

    def _configure_immutable_logging(self):
        """Configure immutable logging with versioning"""
        session = boto3.session.Session()
        client = session.client(
            's3',
            region_name=self.region,
            endpoint_url=f'https://{self.region}.digitaloceanspaces.com',
            aws_access_key_id=os.getenv('DO_SPACES_KEY'),
            aws_secret_access_key=os.getenv('DO_SPACES_SECRET')
        )

        client.put_bucket_versioning(
            Bucket=self.config['space_name'],
            VersioningConfiguration={'Status': 'Enabled'}
        )

    def _configure_k8s(self):
        """Configure Kubernetes components"""
        config.load_kube_config()
        core_v1 = client.CoreV1Api()

        # Create namespaces
        namespaces = ['ai-orchestration', 'service-registry', 'immutable-logs']
        for ns in namespaces:
            core_v1.create_namespace(
                client.V1Namespace(metadata=client.V1ObjectMeta(name=ns))
        
        # Deploy AI Orchestration components
        self._deploy_ai_orchestrator()
        self._deploy_service_registry()

    def _deploy_ai_orchestrator(self):
        """Deploy AI Orchestration components"""
        app = client.V1Deployment(
            metadata=client.V1ObjectMeta(name="ai-orchestrator"),
            spec=client.V1DeploymentSpec(
                replicas=3,
                selector=client.V1LabelSelector(
                    match_labels={"app": "ai-orchestrator"}
                ),
                template=client.V1PodTemplateSpec(
                    metadata=client.V1ObjectMeta(
                        labels={"app": "ai-orchestrator"}
                    ),
                    spec=client.V1PodSpec(
                        containers=[
                            client.V1Container(
                                name="orchestrator",
                                image="registry.digitalocean.com/ai-orchestration/orchestrator:latest",
                                ports=[client.V1ContainerPort(container_port=5000)]
                        )
                    )
                )
            )
        )
        client.AppsV1Api().create_namespaced_deployment(
            namespace="ai-orchestration",
            body=app
        )

    def _deploy_service_registry(self):
        """Deploy auto-discovery service registry"""
        service = client.V1Service(
            metadata=client.V1ObjectMeta(name="service-registry"),
            spec=client.V1ServiceSpec(
                selector={"app": "service-registry"},
                ports=[client.V1ServicePort(port=80, target_port=8080)]
            )
        )

        deployment = client.V1Deployment(
            metadata=client.V1ObjectMeta(name="service-registry"),
            spec=client.V1DeploymentSpec(
                replicas=3,
                selector=client.V1LabelSelector(
                    match_labels={"app": "service-registry"}
                ),
                template=client.V1PodTemplateSpec(
                    metadata=client.V1ObjectMeta(
                        labels={"app": "service-registry"}
                    ),
                    spec=client.V1PodSpec(
                        containers=[
                            client.V1Container(
                                name="registry",
                                image="registry.digitalocean.com/ai-orchestration/registry:latest",
                                ports=[client.V1ContainerPort(container_port=8080)]
                            )
                        ]
                    )
                )
            )
        )

        apps_v1 = client.AppsV1Api()
        core_v1 = client.CoreV1Api()
        apps_v1.create_namespaced_deployment(
            namespace="service-registry",
            body=deployment
        )
        core_v1.create_namespaced_service(
            namespace="service-registry",
            body=service
        )

    def deploy_monitoring(self):
        """Deploy monitoring stack"""
        try:
            # Deploy Prometheus/Grafana
            client.AppsV1Api().create_namespaced_deployment(
                namespace="monitoring",
                body=client.V1Deployment(
                    metadata=client.V1ObjectMeta(name="monitoring-stack"),
                    spec=client.V1DeploymentSpec(
                        replicas=1,
                        template=client.V1PodTemplateSpec(
                            spec=client.V1PodSpec(
                                containers=[
                                    client.V1Container(
                                        name="monitoring",
                                        image="registry.digitalocean.com/ai-orchestration/monitoring:latest"
                                    )
                                ]
                            )
                        )
                    )
                )
            )
            print("Deployed monitoring stack")
            return True
        except Exception as e:
            print(f"Monitoring deployment failed: {str(e)}")
            return False

    def cleanup(self):
        """Clean up all resources"""
        manager = Manager(token=self.token)
        droplets = manager.get_all_droplets(tag_name='ai-orchestration')
        for droplet in droplets:
            droplet.destroy()
        
        databases = manager.get_all_databases()
        for db in databases:
            db.destroy()

if __name__ == "__main__":
    deployer = DigitalOceanDeployer()
    
    print("=== Starting Deployment ===")
    if deployer.create_infrastructure():
        print("1/4 Infrastructure created successfully")
        if deployer.deploy_kubernetes_cluster():
            print("2/4 Kubernetes cluster deployed")
            if deployer.deploy_monitoring():
                print("3/4 Monitoring deployed")
                print("=== Deployment Complete ===")
                print("System Components:")
                print("- AI Orchestration Layer")
                print("- Auto-Discovery Service Registry")
                print("- Immutable Logging (Spaces)")
                print("- Managed PostgreSQL Database")
                print("- GPU-enabled Kubernetes Cluster")
            else:
                deployer.cleanup()
        else:
            deployer.cleanup()
    else:
        deployer.cleanup()