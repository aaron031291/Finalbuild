// Monitor memory usage over time
const memoryUsage = [];

function checkMemory() {
  const usage = process.memoryUsage();
  memoryUsage.push({
    timestamp: Date.now(),
    heapUsed: usage.heapUsed,
    heapTotal: usage.heapTotal,
    rss: usage.rss,
  });
  
  // Keep only the last 100 measurements
  if (memoryUsage.length > 100) {
    memoryUsage.shift();
  }
  
  // Check for consistent growth
  if (memoryUsage.length > 10) {
    const firstUsage = memoryUsage[0];
    const lastUsage = memoryUsage[memoryUsage.length - 1];
    const growth = lastUsage.heapUsed - firstUsage.heapUsed;
    const timeElapsed = lastUsage.timestamp - firstUsage.timestamp;
    const growthRate = growth / timeElapsed;
    
    if (growthRate > 1000) { // More than 1MB per second
      console.warn('Possible memory leak detected');
    }
  }
}

// Run every minute
setInterval(checkMemory, 60000);