#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { ResourceMonitor, LoadBalancer, HealthChecker, UpdateManager, MigrationManager, BackupManager } from './services/index.js';

class DeploymentManager {
  constructor(system, config = {}) {
    this.system = system;
    this.initialized = false;
    this.deployments = new Map();
    this.config = { autoScaling: true, deploymentTimeout: 300000, ...config };
    this.resourceMonitor = new ResourceMonitor();
    this.loadBalancer = new LoadBalancer();
    this.healthChecker = new HealthChecker();
    this.updateManager = new UpdateManager();
    this.migrationManager = new MigrationManager();
    this.backupManager = new BackupManager();
  }

  async initialize() {
    if (this.initialized) return;

    await Promise.all([
      this.resourceMonitor.initialize(this.system),
      this.loadBalancer.initialize(this.config.loadBalancingStrategy),
      this.healthChecker.initialize(this.config.healthCheckInterval),
      this.updateManager.initialize(this.config),
      this.migrationManager.initialize(),
      this.backupManager.initialize(),
    ]);

    this.initialized = true;
    console.log("Deployment Manager initialized successfully");
  }

  async createDeployment(options) {
    if (!this.initialized) throw new Error("Deployment Manager not initialized");

    const deploymentId = `deploy-${Date.now()}`;
    const deployment = {
      id: deploymentId,
      name: options.name,
      environment: options.environment,
      instances: options.instances || this.config.defaultReplicas,
      status: 'pending',
    };

    this.deployments.set(deploymentId, deployment);

    try {
      await this.resourceMonitor.provisionResources(deployment);
      await this.loadBalancer.registerDeployment(deployment);
      await this.healthChecker.scheduleChecks(deployment);
      deployment.status = 'running';

      console.log(`Deployment ${deploymentId} created successfully.`);
      return deployment;
    } catch (error) {
      deployment.status = 'failed';
      console.error(`Deployment ${deploymentId} creation failed: ${error.message}`);
      throw error;
    }
  }

  async scaleDeployment(deploymentId, targetInstances) {
    const deployment = this.deployments.get(deploymentId);
    if (!deployment) throw new Error("Deployment not found");

    deployment.instances = targetInstances;
    await this.resourceMonitor.adjustResources(deployment);
    console.log(`Deployment ${deploymentId} scaled to ${targetInstances} instances.`);
  }

  getDeploymentStatus(deploymentId) {
    return this.deployments.get(deploymentId) || null;
  }

  async shutdown() {
    await Promise.all([
      this.resourceMonitor.shutdown(),
      this.loadBalancer.shutdown(),
      this.healthChecker.shutdown(),
      this.updateManager.shutdown(),
      this.migrationManager.shutdown(),
      this.backupManager.shutdown(),
    ]);

    this.initialized = false;
    console.log("Deployment Manager shutdown complete.");
  }
}

export default DeploymentManager; 
